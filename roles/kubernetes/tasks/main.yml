---
# Tasks to install and initalise Kubernetes

- name: Install required dependancies
  become: true
  ansible.builtin.apt:
    name:
     - apt-transport-https
     - ca-certificates
     - curl
     - gnupg
    state: present
    update_cache: yes

- name: Create keyring directory if it does not exist
  ansible.builtin.file:
    path: /etc/apt/keyrings
    state: directory
    mode: '0755'

- name: Check if Kubernetes keyring exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  register: kubernetes_gpg_key

- name: Download public signing key for Kubernetes package repositories
  become: true
  ansible.builtin.shell:
    cmd: curl -fsSL https://pkgs.k8s.io/core:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/kubernetes-apt-keyring.gpg
  when: not kubernetes_gpg_key.stat.exists

- name: Check if CRI-O keyring exists
  ansible.builtin.stat:
    path: /etc/apt/keyrings/cri-o-apt-keyring.gpg
  register: crio_gpg_key

- name: Download CRI-O key if not exists in /etc/apt/keyrings
  become: true
  ansible.builtin.shell:
    cmd: curl -fsSL https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.31/deb/Release.key | sudo gpg --dearmor -o /etc/apt/keyrings/cri-o-apt-keyring.gpg
  when: not crio_gpg_key.stat.exists

- name: Allow unprivileged APT programs to read kubernetes keyring
  become: true
  ansible.builtin.file:
    path: /etc/apt/keyrings/kubernetes-apt-keyring.gpg
    mode: '644'

- name: Add kubernetes apt repository
  become: true
  ansible.builtin.apt_repository:
    repo: 'deb [signed-by=/etc/apt/keyrings/kubernetes-apt-keyring.gpg] https://pkgs.k8s.io/core:/stable:/v1.31/deb/ /'
    filename: kubernetes
    state: present

- name: Add CRI-O apt repository
  become: true
  ansible.builtin.apt_repository:
    repo: 'deb [signed-by=/etc/apt/keyrings/cri-o-apt-keyring.gpg] https://pkgs.k8s.io/addons:/cri-o:/stable:/v1.31/deb/ /'
    filename: cri-o
    state: present
        
- name: Set kubernetes.list permissions to help tools function correctly
  become: true
  ansible.builtin.file:
    path: /etc/apt/sources.list.d/pkgs_k8s_io_core_stable_v1_31_deb.list
    mode: '644'

- name: Update apt and install kubernetes packages
  become: true
  ansible.builtin.apt:
    name:
     - kubelet
     - kubeadm
     - kubectl
     - cri-o
    state: present
    update_cache: yes

- name: Ensure kubernetes services are started
  become: true
  ansible.builtin.service:
    name: kubelet
    enabled: true
    state: started

- name: Ensure cri-o service is started
  become: true
  ansible.builtin.service:
    name: crio
    enabled: true
    state: started

- name: Check if swap is enabled
  become: true
  ansible.builtin.command:
    cmd: swapon --show
  register: swap_status
  changed_when: false

- name: Disable swap if enabled
  become: true
  ansible.builtin.command:
    cmd: swapoff -a
  when: swap_status.stdout != ""

- name: Remove any swap entry in /etc/fstab
  become: true
  ansible.builtin.lineinfile:
    path: /etc/fstab
    regexp: \sswap\s
    state: absent

- name: Check to see if br_netfilter module is loaded
  become: true
  ansible.builtin.shell:
    cmd: 'lsmod | grep br_netfilter'
  register: br_netfilter_check
  changed_when: false
  failed_when: false

- name: Load br_netfilter kernel module if not currently loaded
  become: true
  ansible.builtin.shell:
    cmd: modprobe br_netfilter
  when: br_netfilter_check.stdout == ""

- name: Ensure br_netfilter is loaded on boot
  become: true
  ansible.builtin.lineinfile:
    path: /etc/modules-load.d/k8s.conf
    line: br_netfilter
    create: true
    state: present

- name: Enable IPv4 forwarding for Kubernetes
  become: true
  ansible.posix.sysctl:
    name: net.ipv4.ip_forward
    value: '1'
    state: present
    reload: true

- name: Ensure bash completion is installed
  become: true
  ansible.builtin.apt:
    name: bash-completion
    state: present

- name: Ensure kubectl autocompletion is enabled in main users ~/.bashrc
  become: true
  ansible.builtin.lineinfile:
    path: "{{ user_home_dir }}/.bashrc"
    line: 'source <(kubectl completion bash)'
    state: present

- name: Build kubernetes join command
  become: true
  ansible.builtin.command:
    cmd: sudo kubeadm token create --print-join-command
  register: join_command
  changed_when: false
  when: "'control' in inventory_hostname"

- name: Debug join_command result
  ansible.builtin.debug:
    var: join_command.stdout

- name: Join worker nodes to kubernetes cluster
  become: true
  ansible.builtin.command:
    cmd: sudo {{ hostvars[groups['kube_control'][0]]['join_command']['stdout'] }}
  when: "'kube_node' in group_names and not worker_in_cluster.stat.exists"

- name: Create ~/.kube directory for kubernetes and ansible user
  become: true
  ansible.builtin.file:
    path: "{{ item.dir }}/.kube"
    state: directory
    mode: '0755'
    owner: "{{ item.name }}"
    group: "{{ item.name }}"
  loop:
    - { dir: '{{ kubernetes_admin_dir }}', name: '{{ kubernetes_admin_user }}' }
    - { dir: '{{ kubernetes_ansible_dir }}', name: '{{ kubernetes_ansible_user }}' }

- name: Run kubernetes control tasks
  ansible.builtin.include_tasks:
    file: prod_kube_control.yml
  when: "'kube_control' in group_names"

- name: Run kubernetes node tasks
  ansible.builtin.include_tasks:
    file: prod_kube_node.yml
  when: "'kube_node' in group_names"

- name: Install Calico for networking kubernetes cluster pods
  become: true
  ansible.builtin.shell: |
    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/tigera-operator.yaml
    kubectl create -f https://raw.githubusercontent.com/projectcalico/calico/v3.28.2/manifests/custom-resources.yaml