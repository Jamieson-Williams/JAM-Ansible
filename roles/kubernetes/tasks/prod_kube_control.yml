---
# Tasks to create kubernetes cluster on control nodes. This playbook should only run on control nodes.

- name: Check if control node is part of kubernetes cluster
  become: true
  ansible.builtin.shell:
    cmd: "export KUBECONFIG=/etc/kubernetes/admin.conf; kubectl get nodes --no-headers | grep -i {{ inventory_hostname }}"
  register: node_in_cluster
  changed_when: false
  failed_when: false

- name: Create kubernetes cluster
  become: true
  ansible.builtin.command:
    cmd: kubeadm init --pod-network-cidr 10.244.0.0/16
  when: node_in_cluster is defined and node_in_cluster.stdout | length == 0

- name: Build kubernetes join command
  become: true
  ansible.builtin.command:
    cmd: sudo kubeadm token create --print-join-command
  register: join_command
  changed_when: false
  when: "'control' in inventory_hostname"

- name: Debug join_command result
  ansible.builtin.debug:
    var: join_command.stdout

- name: Configure kubectl for cluster administrator users
  become: true
  ansible.builtin.copy:
    src: /etc/kubernetes/admin.conf
    dest: "/home/{{ item }}/.kube/config"
    remote_src: true
    owner: "{{ item }}"
    group: "{{ item }}"
    mode: preserve
  loop:
    - "{{ kubernetes_admin_user }}"
    - "{{ kubernetes_ansible_user }}"

- name: Add KUBECONFIG to env on kubernetes control
  become: true
  ansible.builtin.lineinfile:
    path: "{{ item }}/.bashrc"
    regexp: ^export KUBECONFIG
    line: export KUBECONFIG="{{ item }}/.kube/config"
  loop:
    - "{{ kubernetes_admin_dir }}"
    - "{{ kubernetes_ansible_dir }}"

- name: Check if helm is installed
  ansible.builtin.command: helm version --short
  register: helm_check
  ignore_errors: true

- name: Install Helm if not installed
  ansible.builtin.shell: curl https://raw.githubusercontent.com/helm/helm/master/scripts/get-helm-3 | bash
  when: helm_check.failed

- name: Generate Helm autocompletion for Bash
  become: true
  shell: |
    helm completion bash > /etc/bash_completion.d/helm
  args:
    creates: /etc/bash_completion.d/helm

- name: Check if Calico Helm repo is added
  ansible.builtin.command: helm repo list
  register: helm_repo_list
  ignore_errors: true

- name: Add Calico Helm repo if not present
  ansible.builtin.shell: helm repo add projectcalico https://docs.tigera.io/calico/charts
  when: "'projectcalico' not in helm_repo_list.stdout"

- name: Update Helm repos
  ansible.builtin.shell: helm repo update

- name: Create namespace for Tigera Operator
  vars: 
    ansible_python_interpreter: /opt/k8s-venv/bin/python
  kubernetes.core.k8s:
    api_version: v1
    kind: Namespace
    name: tigera-operator
    state: present

- name: Check if Tigera Operator Helm release is installed
  ansible.builtin.command: helm status calico -n tigera-operator
  register: helm_release_check
  failed_when: false
  changed_when: false

- name: Install or upgrade Tigera Operator via Helm
  ansible.builtin.shell: >
    helm upgrade --install calico projectcalico/tigera-operator
    --namespace tigera-operator
    --version "v3.30.1"
  when: helm_release_check.rc != 0
  register: helm_install_result

- name: Create install marker file
  ansible.builtin.file:
    path: /tmp/tigera_installed_marker
    state: touch
  when: helm_install_result is changed

- name: Check if MetalLB is already installed (namespace metallb-system exists)
  ansible.builtin.shell: |
    kubectl get ns metallb-system --no-headers
  register: metallb_installed
  ignore_errors: true
  changed_when: false

- name: Install MetalLB if not already installed
  ansible.builtin.shell: |
    kubectl apply -f https://raw.githubusercontent.com/metallb/metallb/v0.14.9/config/manifests/metallb-native.yaml
  when: metallb_installed.rc !=0

- name: Check if NGINX Ingress Controller is already installed
  ansible.builtin.shell: |
    kubectl get deployment ingress-nginx-controller -n ingress-nginx --no-headers
  register: nginx_ingress_controller_installed
  ignore_errors: true
  changed_when: false

- name: Install NGINX Ingress Controller if not already installed
  ansible.builtin.shell: |
    kubectl apply -f https://raw.githubusercontent.com/kubernetes/ingress-nginx/controller-v1.12.2/deploy/static/provider/baremetal/deploy.yaml
  when: nginx_ingress_controller_installed.rc != 0

- name: Check current type of ingress-nginx-controller service
  ansible.builtin.shell: |
    kubectl -n ingress-nginx get svc ingress-nginx-controller -o jsonpath='{.spec.type}'
  register: nginx_ingress_service_type
  changed_when: false
  failed_when: nginx_ingress_service_type.rc != 0

- name: Patch ingress-nginx-controller to type LoadBalancer if not already
  ansible.builtin.shell: |
    kubectl -n ingress-nginx patch svc ingress-nginx-controller \
    --type='json' \
    -p='[{"op":"replace","path":"/spec/type","value":"LoadBalancer"}]'
  when: nginx_ingress_service_type.stdout != "LoadBalancer"
  register: nginx_ingress_patch_result

- name: Check if Cert-Manager is already installed
  ansible.builtin.shell: |
    kubectl get deployment cert-manager -n cert-manager --no-headers
  register: cert_manager_installed
  ignore_errors: true
  changed_when: false

- name: Install cert-manager if not already installed
  ansible.builtin.shell: |
    kubectl apply -f https://github.com/cert-manager/cert-manager/releases/download/v1.17.2/cert-manager.yaml
  when: cert_manager_installed.rc != 0

- name: Create Cloudflare API token secret in kubernetes
  ansible.builtin.shell: |
    kubectl create secret generic cloudflare-api-token-secret \
      --from-literal=api-token={{ cloudflare_api_token }} \
      --namespace cert-manager \
      --dry-run=client -o yaml | kubectl apply -f -
  no_log: true

- name: Check control-plane taint is set to NoSchedule
  ansible.builtin.shell: |
    kubectl describe node {{ inventory_hostname }} | grep "node-role.kubernetes.io/control-plane:NoSchedule"
  register: taint_check
  ignore_errors: true
  changed_when: false

- name: Ensure control node taint is set to NoSchedule
  ansible.builtin.shell: |
    kubectl taint nodes {{ inventory_hostname }} node-role.kubernetes.io/control-plane=:NoSchedule
  when: taint_check.rc != 0